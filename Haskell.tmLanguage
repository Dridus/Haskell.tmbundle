<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>fileTypes</key>
    <array>
        <string>hs</string>
    </array>
    <key>keyEquivalent</key>
    <string>^~H</string>
    <key>name</key>
    <string>Haskell</string>
    <key>scopeName</key>
    <string>source.haskell</string>
    <key>uuid</key>
    <string>5C034675-1F6D-497E-8073-369D37E2FD7D</string>


    <key>patterns</key>
    <array>
        <dict>
            <key>include</key>
            <string>#preprocessor</string>
        </dict>
        <dict>
            <key>name</key>
            <string>keyword.operator.function.infix.haskell</string>
            <key>comment</key>
            <string>In case this regex seems unusual for an infix operator, note that Haskell allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).</string>
            <key>match</key>
            <string>(`)[a-zA-Z_']*?(`)</string>
            <key>captures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>punctuation.definition.entity.haskell</string></dict>
                <key>2</key> <dict><key>name</key><string>punctuation.definition.entity.haskell</string></dict>
            </dict>
        </dict>
        <dict>
            <key>name</key>
            <string>constant.language.unit.haskell</string>
            <key>match</key>
            <string>\(\)</string>
        </dict>
        <dict>
            <key>name</key>
            <string>constant.language.empty-list.haskell</string>
            <key>match</key>
            <string>\[\]</string>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.declaration.module.haskell</string>
            <key>begin</key>
            <string>\b(module)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>end</key>
            <string>(where)</string>
            <key>endCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#module_name</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#module_exports</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>invalid</string>
                    <key>match</key>
                    <string>[a-z]+</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.declaration.class.haskell</string>
            <key>begin</key>
            <string>\b(class)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>support.class.prelude.haskell</string>
                    <key>match</key>
                    <string>\b(Monad|Functor|Eq|Ord|Read|Show|Num|(Frac|Ra)tional|Enum|Bounded|Real(Frac|Float)?|Integral|Floating)\b</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>entity.other.inherited-class.haskell</string>
                    <key>match</key>
                    <string>[A-Z][A-Za-z_']*</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>variable.other.generic-type.haskell</string>
                    <key>match</key>
                    <string>\b(?!default|where|data|newtype|type|class|instance|deriving)[a-z][a-zA-Z0-9_']*\b</string>
                </dict>
            </array>
            <key>end</key>
            <string>(?x)(?=
                  (\#|where|default|data|newtype|type|class|instance|deriving)\s  # When a top level declaration starts
                | ^\s*[(a-z_][^=]*(=)[\sa-zA-Z0-9_\(]                # A function declaration
                | ^\s*(?:default\s+)?[a-z_].*?(::|∷)[\sa-zA-Z0-9_\(]                # A function type
            )
            </string>
        </dict>
        <dict>
            <key>begin</key>
            <string>\b(instance)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>name</key>
            <string>meta.declaration.instance.haskell</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#type_signature</string>
                </dict>
            </array>
            <key>end</key>
            <string>\b(where)\b|$</string>
            <key>endCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.import.haskell</string>
            <key>begin</key>
            <string>\b(import)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(qualified|as|hiding)</string>
                    <key>name</key>
                    <string>keyword.other.haskell</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#module_name</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#module_exports</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
            </array>
            <key>end</key>
            <string>(^$|;|(?=import))</string>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.deriving.haskell</string>
            <key>begin</key>
            <string>(deriving)\s*\(</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>entity.other.inherited-class.haskell</string>
                    <key>match</key>
                    <string>\b[A-Z][a-zA-Z_']*</string>
                </dict>
            </array>
            <key>end</key>
            <string>\)</string>
        </dict>
        <dict>
            <key>name</key>
            <string>keyword.other.haskell</string>
            <key>match</key>
            <string>\b(where|case|of|let|in)\b</string>
        </dict>
        <dict>
            <key>name</key>
            <string>keyword.operator.haskell</string>
            <key>match</key>
            <string>\binfix[lr]?\b</string>
        </dict>
        <dict>
            <key>name</key>
            <string>keyword.control.haskell</string>
            <key>match</key>
            <string>\b(do|if|then|else)\b</string>
        </dict>
        <dict>
            <key>name</key>
            <string>constant.numeric.float.haskell</string>
            <key>match</key>
            <string>\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b</string>
            <key>comment</key>
            <string>Floats are always decimal</string>
        </dict>
        <dict>
            <key>name</key>
            <string>constant.numeric.haskell</string>
            <key>match</key>
            <string>\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b</string>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.import.foreign.haskell</string>
            <key>begin</key>
            <string>^(\s*)\b(foreign\s+import(?:\s+[a-zA-Z]+)+)\s+("[^"]*")</string>
            <key>beginCaptures</key>
            <dict>
                <key>2</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
                <key>3</key> <dict><key>name</key><string>string.quoted.double.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#function_signature</string>
                </dict>
            </array>
            <key>end</key>
            <string>^(?!\1\s+\S|\s*$)</string>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.preprocessor.c</string>
            <key>comment</key>
            <string>In addition to Haskell's "native" syntax, GHC permits the C preprocessor to be run on a source file.</string>
            <key>match</key>
            <string>^\s*(#)\s*\w+</string>
            <key>captures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>punctuation.definition.preprocessor.c</string></dict>
            </dict>
        </dict>
        <dict>
            <key>include</key>
            <string>#pragma</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor</string>
        </dict>
        <dict>
            <key>name</key>
            <string>string.quoted.double.haskell</string>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key> <dict><key>name</key><string>punctuation.definition.string.begin.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.haskell</string>
                    <key>match</key>
                    <string>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&amp;])</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.octal.haskell</string>
                    <key>match</key>
                    <string>\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.control.haskell</string>
                    <key>match</key>
                    <string>\^[A-Z@\[\]\\\^_]</string>
                </dict>
            </array>
            <key>end</key>
            <string>$|"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key> <dict><key>name</key><string>punctuation.definition.string.end.haskell</string></dict>
            </dict>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.other.quasiquote.haskell</string>
            <key>comment</key>
            <string>Points out splices in ast quotes</string>
            <key>begin</key>
            <string>\[(?:|e|d|t|p)\|</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key> <dict><key>name</key><string>keyword.other.quasibracket.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>keyword.other.splice.haskell</string>
                    <key>match</key>
                    <string>\$\(</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>string.quasiquoted.haskell</string>
                    <key>match</key>
                    <string>\$</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>string.quasiquoted.haskell</string>
                    <key>match</key>
                    <string>[^$]*</string>
                </dict>
            </array>
            <key>end</key>
            <string>(.*)(\|\])</string>
            <key>endCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>string.quasiquoted.haskell</string></dict>
                <key>2</key> <dict><key>name</key><string>keyword.other.quasibracket.haskell</string></dict>
            </dict>
        </dict>
        <dict>
            <key>name</key>
            <string>keyword.other.splice.haskell</string>
            <key>comment</key>
            <string>Highlight the beginning of a splice.</string>
            <key>match</key>
            <string>\$\(</string>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.other.quasiquote.haskell</string>
            <key>begin</key>
            <string>\[[a-zA-Z0-9_']*\|</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key> <dict><key>name</key><string>keyword.other.quasibracket.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>.*</string>
                    <key>name</key>
                    <string>string.quasiquoted.haskell</string>
                </dict>
            </array>
            <key>end</key>
            <string>(.*)(\|\])</string>
            <key>endCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>string.quasiquoted.haskell</string></dict>
                <key>2</key> <dict><key>name</key><string>keyword.other.quasibracket.haskell</string></dict>
            </dict>
        </dict>
        <dict>
            <key>name</key>
            <string>string.quoted.single.haskell</string>
            <key>match</key>
            <string>(?x)
            (')
            (?:
                [\ -\[\]-~]                             # Basic Char
              | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
                    |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
                    |US|SP|DEL|[abfnrtv\\\"'\&amp;]))       # Escapes
              | (\\o[0-7]+)                             # Octal Escapes
              | (\\x[0-9A-Fa-f]+)                       # Hexadecimal Escapes
              | (\^[A-Z@\[\]\\\^_])                     # Control Chars
            )
            (')
            </string>
            <key>captures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>punctuation.definition.string.begin.haskell</string></dict>
                <key>2</key> <dict><key>name</key><string>constant.character.escape.haskell</string></dict>
                <key>3</key> <dict><key>name</key><string>constant.character.escape.octal.haskell</string></dict>
                <key>4</key> <dict><key>name</key><string>constant.character.escape.hexadecimal.haskell</string></dict>
                <key>5</key> <dict><key>name</key><string>constant.character.escape.control.haskell</string></dict>
                <key>6</key> <dict><key>name</key><string>punctuation.definition.string.end.haskell</string></dict>
            </dict>
        </dict>
        <dict>
            <key>name</key>
            <string>declaration.type.haskell</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#type_signature</string>
                </dict>
            </array>
            <key>begin</key>
            <string>^(\s*)(type)\s+((?:family|instance)\s+)?([(A-Z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>2</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
                <key>3</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
                <key>4</key> <dict><key>name</key><string>entity.name.type.haskell</string></dict>
            </dict>
            <key>end</key>
            <string>^(?!\1\s+\S|\s*$)</string>
        </dict>
        <dict>
            <key>name</key>
            <string>declaration.data.haskell</string>
            <key>begin</key>
            <string>^(\s*)(data|newtype)\s+([(A-Z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>2</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
                <key>3</key> <dict><key>name</key><string>entity.name.type.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>meta.record.haskell</string>
                    <key>match</key>
                    <string>\s*(=)\s*([A-Z]\w*)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key> <dict><key>name</key><string>keyword.operator.haskell</string></dict>
                        <key>2</key> <dict><key>name</key><string>entity.name.function.haskell</string></dict>
                    </dict>
                </dict>
                <dict>
                    <key>name</key>
                    <string>meta.record.haskell</string>
                    <key>match</key>
                    <string>\s*([|])\s*([A-Z]\w*)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key> <dict><key>name</key><string>keyword.operator.haskell</string></dict>
                        <key>2</key> <dict><key>name</key><string>entity.name.function.haskell</string></dict>
                    </dict>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#function_signature</string>
                </dict>
            </array>
            <key>end</key>
            <string>^(?!\1\s+\S|\s*$)</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>^(\s*)\b(default)\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>2</key> <dict><key>name</key><string>keyword.other.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#function_signature</string>
                </dict>
            </array>
            <key>end</key>
            <string>^(?!\1\s+\S|\s*$)</string>
        </dict>
        <dict>
            <key>name</key>
            <string>meta.function.type-declaration.haskell</string>
            <key>begin</key>
            <string>^(\s*)(\b[[:alpha:]_][[:alpha:][:digit:]_']*|\([→←⇾⇽⤜⤛⤙⤚¬∨∧⊕⋅÷≥≤≢⧺⊥⊛⋘⋙⫴⧻⁂⊚≪≫★≡∘^|\\!*%$?~+:\-.=&lt;/&gt;]+\))\s*(::|∷)</string>
            <key>beginCaptures</key>
            <dict>
                <key>2</key> <dict><key>name</key><string>entity.name.function.haskell</string></dict>
                <key>3</key> <dict><key>name</key><string>keyword.other.double-colon.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#type_signature</string>
                </dict>
            </array>
            <key>end</key>
            <string>^(?!\1\s+\S|\s*$)</string>
        </dict>
        <dict>
            <key>name</key>
            <string>constant.other.haskell</string>
            <key>match</key>
            <string>\b[A-Z]\w*\b</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#comments</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#infix_op</string>
        </dict>
        <dict>
            <key>name</key>
            <string>keyword.operator.haskell</string>
            <key>comment</key>
            <string>In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&amp;*.</string>
            <key>match</key>
            <string>[→←⇾⇽⤜⤛⤙⤚¬∨∧⊕⋅÷≥≤≢⧺⊥⊛⋘⋙⫴⧻⁂⊚≪≫★≡∘^|\\!*%$?~+:\-.=&lt;/&gt;]+</string>
        </dict>
        <dict>
            <key>name</key>
            <string>punctuation.separator.comma.haskell</string>
            <key>match</key>
            <string>,</string>
        </dict>
    </array>


    <key>repository</key>
    <dict>
        <key>block_comment</key>
        <dict>
            <key>name</key>
            <string>comment.block.haskell</string>
            <key>begin</key>
            <string>\{-(?!#)</string>
            <key>captures</key>
            <dict>
                <key>0</key> <dict><key>name</key><string>punctuation.definition.comment.haskell</string></dict>
            </dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_comment</string>
                </dict>
            </array>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>end</key>
            <string>-\}</string>
        </dict>

        <key>comments</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>comment.line.double-dash.haskell</string>
                    <key>match</key>
                    <string>(--).*$\n?</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key> <dict><key>name</key><string>punctuation.definition.comment.haskell</string></dict>
                    </dict>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block_comment</string>
                </dict>
            </array>
        </dict>

        <key>infix_op</key>
        <dict>
            <key>name</key>
            <string>entity.name.function.infix.haskell</string>
            <key>match</key>
            <string>(\([→←⇾⇽⤜⤛⤙⤚¬∨∧⊕⋅÷≥≤≢⧺⊥⊛⋘⋙⫴⧻⁂⊚≪≫★≡∘^|\\!*%$?~+:\-.=&lt;/&gt;]+\)|\(,+\))</string>
        </dict>

        <key>module_exports</key>
        <dict>
            <key>name</key>
            <string>meta.declaration.exports.haskell</string>
            <key>begin</key>
            <string>\(</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>meta.declaration.constructors.exports.haskell</string>
                    <key>begin</key>
                    <string>\b([A-Z][a-zA-Z_'0-9]*)\s*\(</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>1</key> <dict><key>name</key><string>storage.type.haskell</string></dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>name</key>
                            <string>keyword.other.haskell</string>
                            <key>match</key>
                            <string>\.\.</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#infix_op</string>
                        </dict>
                        <dict>
                            <key>name</key>
                            <string>storage.type.haskell</string>
                            <key>match</key>
                            <string>[A-Z][a-zA-Z_'0-9]*</string>
                        </dict>
                        <dict>
                            <key>name</key>
                            <string>entity.name.function.haskell</string>
                            <key>match</key>
                            <string>[a-z][a-zA-Z_'0-9]*</string>
                        </dict>
                    </array>
                    <key>end</key>
                    <string>\)</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.haskell</string>
                    <key>match</key>
                    <string>\b[a-z][a-zA-Z_'0-9]*</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>storage.type.haskell</string>
                    <key>match</key>
                    <string>\b[A-Z][A-Za-z_'0-9]*</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>punctuation.separator.comma.haskell</string>
                    <key>match</key>
                    <string>,</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#infix_op</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>meta.other.unknown.haskell</string>
                    <key>comment</key>
                    <string>So named because I don't know what to call this.</string>
                    <key>match</key>
                    <string>\(.*?\)</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#preprocessor</string>
                </dict>
            </array>
            <key>end</key>
            <string>\)</string>
        </dict>

        <key>module_name</key>
        <dict>
            <key>name</key>
            <string>support.other.module.haskell</string>
            <key>match</key>
            <string>[A-Z][A-Za-z._']*</string>
        </dict>

        <key>pragma</key>
        <dict>
            <key>name</key>
            <string>meta.preprocessor.haskell</string>
            <key>begin</key>
            <string>\{-#</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\b(LANGUAGE|UNPACK|INLINE)\b</string>
                    <key>name</key>
                    <string>keyword.other.preprocessor.haskell</string>
                </dict>
            </array>
            <key>end</key>
            <string>#-\}</string>
        </dict>

        <key>preprocessor</key>
        <dict>
            <key>name</key>
            <string>meta.preprocessor.haskell</string>
            <key>begin</key>
            <string>(\#(?:ifdef|else|endif|if|define|include))\b</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key> <dict><key>name</key><string>keyword.preprocessor.haskell</string></dict>
            </dict>
            <key>end</key>
            <string>$</string>
        </dict>

        <key>function_signature</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>name</key>
                    <string>meta.function.type-declaration.haskell</string>
                    <key>begin</key>
                    <string>(\b[[:alpha:]_][[:alpha:][:digit:]_']*|\([→←⇾⇽⤜⤛⤙⤚¬∨∧⊕⋅÷≥≤≢⧺⊥⊛⋘⋙⫴⧻⁂⊚≪≫★≡∘^|\\!*%$?~+:\-.=&lt;/&gt;]+\))\s*(::|∷)</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>1</key> <dict><key>name</key><string>entity.name.function.haskell</string></dict>
                        <key>2</key> <dict><key>name</key><string>keyword.other.double-colon.haskell</string></dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#type_signature</string>
                        </dict>
                    </array>
                    <key>end</key>
                    <string>(?x)(?=
                          ^(\#|foreign|default|data|newtype|type|class|instance|deriving)\s  # When a top level declaration starts
                        | ^\s*[(a-z_][^=]*(=)[\sa-zA-Z0-9_\(]                # A function declaration
                        | .*?(::|∷)[\sa-zA-Z0-9_\(]                # A function type
                    )
                    </string>
                </dict>
            </array>
        </dict>

        <key>type_signature</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#pragma</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#preprocessor</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>keyword.other.arrow.haskell</string>
                    <key>match</key>
                    <string>(-&gt;|→)</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>keyword.other.big-arrow.haskell</string>
                    <key>match</key>
                    <string>(=&gt;|⇒)</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>variable.other.generic-type.haskell</string>
                    <key>match</key>
                    <string>\b(?!(?:foreign|default|where|data|newtype|type|class|instance|deriving)\b)[a-z][a-zA-Z0-9_']*\b</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>storage.type.haskell</string>
                    <key>match</key>
                    <string>\b[A-Z][a-zA-Z0-9_']*\b</string>
                </dict>
                <dict>
                    <key>name</key>
                    <string>support.constant.unit.haskell</string>
                    <key>match</key>
                    <string>\(\)</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
            </array>
        </dict>
    </dict>
</dict>
</plist>
